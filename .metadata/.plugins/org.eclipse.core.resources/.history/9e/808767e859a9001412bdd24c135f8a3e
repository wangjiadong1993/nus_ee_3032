//*****************************************************************************
// LPC1769_CMSIS_MCU_blinky
// ==========
// CK Tham, ECE, NUS
// June 2011
// adapted from Code Red LPCXpresso1768_systick
// to use Lib_MCU : PINSEL and GPIO
// see readme.txt file
//*****************************************************************************

// CMSIS headers required for setting up SysTick Timer
#include "LPC17xx.h"
// Lib_MCU header files
#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"

volatile uint32_t msTicks; // counter for 1ms SysTicks

// ****************
//  SysTick_Handler - just increment SysTick counter
void SysTick_Handler(void) {
  msTicks++;
}

// ****************
// systick_delay - creates a delay of the appropriate number of Systicks (happens every 1 ms)
__INLINE static void systick_delay (uint32_t delayTicks) {
  uint32_t currentTicks;

  currentTicks = msTicks;	// read current tick counter
  // Now loop until required number of ticks passes
  while ((msTicks - currentTicks) < delayTicks);
}



// Function to initialise GPIO to access LED2

// ****************
int main(void) {
	
//	led2_init();	// Setup GPIO for LED2
//	led2_on();		// Turn LED2 on

	// Setup SysTick Timer to interrupt at 1 msec intervals
//	if (SysTick_Config(SystemCoreClock / 1000)) {
//	    while (1);  // Capture error
//	}
	
	// Enter an infinite loop, just incrementing a counter and toggling LEDs every 2 seconds
	//volatile static int i = 0 ;
//	while(1) {
//		//i++;
//	    //systick_delay(2000); // wait 2 seconds (2000ms)
////		printf("hello world\n");
//		comp() == 0 ? led2_on() : led2_off();
	    //led2_invert();	// Toggle state of LED2
//	}
	return 0 ;
}
